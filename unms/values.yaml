
# nameOverride -- String to partially override unms.fullname template (will maintain the release name)
nameOverride: ""

# String to fully override unms.fullname template
fullnameOverride: ""

# podAnnotations -- Annotations for UNMS pods
podAnnotations: {}
  # iam.amazonaws.com/role: unms
# image -- UNMS docker image name (use ubnt/unms for amd64, fastlorenzo/unms for arm/arm64)
image: padhihomelab/unms
# imageTag -- UNMS docker image tag
imageTag: "latest"
# imagePullPolicy -- UNMS docker image pull policy
imagePullPolicy: "Always"
# podManagementPolicy -- UNMS pods management policy
podManagementPolicy: "Parallel"
# updateStrategy -- UNMS pods update strategy
updateStrategy: "RollingUpdate"
# labels -- UNMS pod extra labels
labels: {}
# replicas -- Number of UNMS replicas
replicas: 1
# clusterDomain -- Kubernetes Cluster Domain
clusterDomain: cluster.local
# unmsUserId -- UNMS User ID
unmsUserId: 10001
# resources -- UNMS pods resources
resources: {}
  # requests:
  #   cpu: 0.1
  #   memory: 100
  # limits:
  #   cpu: "1000m"
  #   memory: "2Gi"
persistence:
  # persistence.enabled -- Persist UNMS data
  enabled: true
  annotations: {}
  # persistence.existingClaim -- Name of existing PVC for UNMS data
  existingClaim: "unms-storage-nfs"
  # persistence.accessModes -- UNMS storage access modes
  accessModes:
    - ReadWriteOnce
  # persistence.size -- UNMS storage size
  size: 10Gi
  # persistence.storageClass -- UNMS PV storage class name, keep empty to use default.
  # Not used if `existingClaim` is set.
  storageClass: ""

ingress:
  # ingress.enabled -- Enable Ingress controller
  enabled: false
  # ingress.annotations -- Ingress annotations
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: "step-issuer"
    cert-manager.io/acme-challenge-type: http01
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
  # ingress.hosts -- Ingress hosts configuration
  hosts:
    - host: unms.bernardi.local
      paths:
        - /
  # ingress.tls -- Ingress TLS configuration
  tls:
    - hosts:
      - unms.bernardi.local
      secretName: unms-bernardi-local-tls

# postgresql -- Bitnami PostgreSQL values to override (source)[https://github.com/helm/charts/issues/19132]
postgresql:
  image:
    repository: postgres
    tag: 9.6
  volumePermissions:
    enabled: true
    image:
      repository: postgres
      tag: 9.6
  persistence:
    mountPath: /data
    existingClaim: "unms-postgresql-0"
    size: 20Gi
  postgresqlDataDir: /data/data
  securityContext:
    fsGroup: 11001
    runAsUser: 10001
  livenessProbe:
    initialDelaySeconds: 120
  readinessProbe:
    initialDelaySeconds: 120
  resources:
    requests:
      memory: 128Mi
      cpu: "100m"
  postgresqlDatabase: unms
  postgresqlUsername: unms
  # postgresql.existingSecret -- Should be RELEASE_NAME-postgresql
  existingSecret: unms-postgresql
  # postgresql.initdbScriptsConfigMap -- Should be RELEASE_NAME-unms-initdb
  initdbScriptsConfigMap: unms-unms-initdb

# rabbitmq -- Bitnami RabbitMQ values to override
rabbitmq:
  image:
    repository: rabbitmq
    tag: 3.8-alpine
  volumePermissions:
    image:
      repository: rabbitmq
      tag: 3.8-alpine
  persistence:
    enabled: false

# redis -- Bitnami Redis values to override
redis:
  image:
    repository: redis
    tag: 6.0
  sentinel:
    image:
      repository: redis
      tag: 6.0
  volumePermissions:
    image:
      repository: redis
      tag: 6.0
  persistence:
    enabled: false
  master:
    command: "/usr/local/bin/docker-entrypoint.sh"
    persistence:
      enabled: false
  slave:
    command: "/usr/local/bin/docker-entrypoint.sh"
    persistence:
      enabled: false
  usePassword: false

# siridb -- SiriDB values to override
siridb:
  service:
    port: 9000

unms-nginx:
  ingress:
    # ingress.enabled -- Enable Ingress controller
    enabled: true
    # ingress.annotations -- Ingress annotations
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: "step-issuer"
      cert-manager.io/acme-challenge-type: http01
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    # ingress.hosts -- Ingress hosts configuration
    hosts:
      - host: unms.bernardi.local
        paths:
          - /
    # ingress.tls -- Ingress TLS configuration
    tls:
      - hosts:
        - unms.bernardi.local
        secretName: unms-bernardi-local-tls
